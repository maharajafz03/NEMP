const express = require("express");
const mongoose = require("mongoose");

const PORT = 3000;

const app = express();

app.use(express.json());

// MongoDB connection
const connectDB = async () => {
    try {
        await mongoose.connect('mongodb://localhost:27017/mydatabase', {
            serverSelectionTimeoutMS: 30000, // 30 seconds
            socketTimeoutMS: 45000, // 45 seconds
        });
        console.log('MongoDB connected');
    } catch (err) {
        console.error(err.message);
        process.exit(1); // Exit process with failure
    }
};

connectDB();

// Creating schema
const schema = new mongoose.Schema({
    name: String,
    email: String,
    age: Number,
    id: Number
});

const model = mongoose.model("friendcollection", schema);

// POST request
app.post("/post", async (req, res) => {
    console.log("post successfully");

    try {
        const data = new model({
            name: req.body.name,
            email: req.body.email,
            age: req.body.age,
            id: req.body.id
        });

        const value = await data.save();
        res.send("successfully completed");
    } catch (err) {
        console.error(err);
        res.status(500).send("Error saving data");
    }
});

// PUT Method
app.put("/put/:id", async (req, res) => {
    let uid = req.params.id;
    let upname = req.body.name;
    let umail = req.body.email;
    let uage = req.body.age; // Fixed the variable name

    try {
        const updatedData = await model.findOneAndUpdate(
            { id: uid },
            { $set: { name: upname, email: umail, age: uage } },
            { new: true }
        );

        if (!updatedData) {
            res.send("No data found with the given id");
        } else {
            res.send(updatedData);
        }
    } catch (err) {
        console.error(err);
        res.status(500).send("Error updating data");
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on ${PORT}`);
});
